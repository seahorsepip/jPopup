<!DOCTYPE html>
<html lang="en" style="">
<head>
<meta charset="utf-8">
<meta name="viewport" content="minimum-scale=1.0, maximum-scale=1.0, width=device-width">
<title>jPopup</title>
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet" type="text/css">
<link href="./css/jpopup.min.css" rel="stylesheet" type="text/css" />
<link href="./css/jpopup.ie.min.css" rel="stylesheet" type="text/css" />
<link href="./css/animate.min.css" rel="stylesheet" type="text/css">
<link href="./css/code.css" rel="stylesheet" type="text/css">
<style type="text/css">
html,body,div,span,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,abbr,address,cite,code,del,dfn,em,img,ins,kbd,q,samp,small,strong,sub,sup,var,b,i,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,figcaption,figure,footer,header,hgroup,menu,nav,section,summary,time,mark,audio,video {
	margin: 0;
	padding: 0;
	border: 0;
	outline: 0;
	font-size: 100%;
	vertical-align: baseline;
	background: transparent;
}
article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section {
	display: block;
}
body {
	width: 600px;
	margin: 0 auto;
	font-family: "Roboto", sans-serif;
}
#wrapper hr {
	width: 100%;
	margin: 48px 0;
	background: #eee;
	height: 2px;
	border: 0;
}
#wrapper h1 {
	font-size: 64px;
	font-weight: 300;
	line-height: 128px;
	margin-top: 48px;
}
#wrapper h2 {
	font-size: 32px;
	font-weight: 300;
	line-height: 92px;
	margin-bottom: 24px;
}
#wrapper h3 {
	font-size: 22px;
	font-weight: 400;
	color: #444;
	margin: 24px 0;
	padding-top: 32px;
}
#wrapper p + h3 {
	margin-top: 48px;
}
#wrapper h4 {
	font-size: 18px;
	font-weight: 500;
	color: #777;
}
#wrapper .button {
	font-family: "Roboto", sans-serif;
	font-size: 16px;
	font-weight: 700;
	color: #777;
	line-height: 48px;
	padding: 0 16px;
	margin: 0 10px;
	border: 0;
	border-radius: 3px;
	background: #f6f6f6;
	cursor: pointer;
	outline: 0;
	display: inline-block;
	text-decoration: none;
}
#wrapper .button svg {
	margin: 12px 10px 0 0;
	float: left;
	fill: #777;
}
#wrapper .buttons {
	margin-top: 48px;
}
#wrapper .buttons .button {
	margin-left: 0;
}
#wrapper .button:hover {
	background: #eee;
}
#wrapper .button:active {
	background: #ddd;
}
#wrapper ul li {
	color: #777;
	line-height: 64px;
	font-weight: 300;
	font-size: 20px;
	list-style: none;
}
#wrapper p {
	color #777;
	line-height: 24px;
	margin-bottom: 24px;
}
#wrapper code {
	line-height: 24px;
	margin-bottom: 48px;
	padding-left: 10px;
}
#wrapper a.link {
	color: #000080;
	text-decoration: none;
	border-bottom: 1px solid #000080;
	font-weight: 500;
}
#wrapper i {
	color: #008080;
	font-style: normal;
	font-weight: 500;
}
#menu {
	position: fixed;
	top: 86px;
	bottom: 86px;
	left: 50%;
	margin-left: -550px;
	width: 200px;
	border-right: 2px solid #eee;
}
#menu li {
	list-style: none;
}
#menu li ul {
	display: none;
}
#menu li a.current + ul {
	display: block;
}
#menu li ul li {
	padding-left: 20px;
}
#menu li a {
	font-size: 16px;
	text-decoration: none;
	line-height: 48px;
	color: #777;
	display: block;
	cursor: pointer;
}
#menu li li a {
	font-size: 14px;
	line-height: 32px;
}
#menu li a.current {
	color: #444;
	font-weight: 700;
	border-right: 2px solid #444;
	margin-right: -2px;
}
</style>
</head>
<body>
<section id="wrapper">
	<h1 id="logo">jPopup.js</h1>
	<h4>Advanced jQuery plugin to show popups.</h4>
	<div class="buttons">
		<button class="button">
			<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
				<path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path>
			</svg>
			Demo
		</button>
		<a class="button" id="download">
			<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
				<path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path>
			</svg>
			Download
		</a>
		<a href="https://github.com/seahorsepip/jPopup" target="_blank" class="button">
			<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
				<path d="M12 3.4C7 3.4 3 7.5 3 12.4c0 4 2.6 7.3 6.2 8.5 0.5 0.1 0.6-0.2 0.6-0.4 0-0.2 0-0.8 0-1.5C7.3 19.6 6.7 17.8 6.7 17.8 6.3 16.8 5.7 16.5 5.7 16.5c-0.8-0.6 0.1-0.5 0.1-0.5 0.9 0.1 1.4 0.9 1.4 0.9 0.8 1.4 2.1 1 2.6 0.7 0.1-0.6 0.3-1 0.6-1.2-2-0.2-4.1-1-4.1-4.4 0-1 0.4-1.8 0.9-2.4-0.1-0.2-0.4-1.1 0.1-2.4 0 0 0.8-0.2 2.5 0.9 0.7-0.2 1.5-0.3 2.3-0.3 0.8 0 1.5 0.1 2.3 0.3 1.7-1.2 2.5-0.9 2.5-0.9 0.5 1.2 0.2 2.2 0.1 2.4 0.6 0.6 0.9 1.4 0.9 2.4 0 3.5-2.1 4.2-4.1 4.4 0.3 0.3 0.6 0.8 0.6 1.7 0 1.2 0 2.2 0 2.5 0 0.2 0.2 0.5 0.6 0.4 3.6-1.2 6.1-4.6 6.1-8.5 0-5-4-9-9-9"></path>
			</svg>
			Github
		</a>
	</div>
	<hr>
	<h2 id="features">Features</h2>
	<ul>
		<li>Supports all browsers including IE6 and above.</li>
		<li>Small footprint with a filesize of just 3KB.</li>
		<li>No CSS dependencies.</li>
		<li>Responsive.</li>
	</ul>
	<hr>
	<h2 id="getting_started">Getting started</h2>
	<h3 id="installation">Installation</h3>
	<p>include <i>jquery.jpopup.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>Create a new jPopup instance:</p>
	<pre><code>var example = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}]
});</code></pre>
	<p>Open the jPopup instance on button click:</p>
	<pre><code>$("button").click(function() {
	example.open();
});</code></pre>
	<p>Try it yourself:<button class="button" id="example1">Open popup</button></p>
	<h3 id="callback_function">Callback function</h3>
	<p>In most cases you want to know which button is clicked, this can be done by adding a value to a button and passing a callback function to the open method.</p>
	<pre><code>var example2 = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure",
		value: true
	}, {
		text: "Nope"
	}]
});</code></pre>
	<p>Open the jPopup instance on button click:</p>
	<pre><code>$("button").click(function() {
	example2.open(function(value) {
		if(value) {
			//Create new popup to say thank you.
			new jPopup({
				content: "&lt;p&gt;Thanks!&lt;/p&gt;",
				buttons: [{
					text: "Ok"
				}]
			}).open();
		}
	});
});</code></pre>
	<p>Try it yourself:<button class="button" id="example2">Open popup</button></p>
	<hr>
	<h2 id="options">Options</h2>
	<p>Available options:</p>
	<pre><code>var example = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;", //Title
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;", //Content
	/* Array of button objects. */
	buttons: [{
		text: "Sure", //Text to show on button.
		name: "", //Name of the button.
		value: null, //Value passed to callback function.
		classes: "", //Space seperated list of classes.
		disabled: false, //Disabled state.
		hidden: false, //Hide button.
		close: true //Popup closes when button is clicked.
		onclick: null //Function called on click.
	}],
	/*
	Set position, you can choose between:
	center, top, left, bottom, right,
	topLeft, topRight, bottomLeft, bottomRight,
	stretchTop, stretchLeft, stretchBottom, stretchRight and full.
	*/
	position: "center",
	offset: { //Offset relative to position.
		x: 0,
		y: 0
	}
	overlay: true, //Show overlay.
	overlayClose: false, //Close popup when overlay is clicked.
	closeButton: false, //Show close button.
	closeButtonContent: "&amp;#215", //Content of close button.
	speed: 300, //Animation speed in milliseconds.
	animations: {}, //Animation functions for each position.
	closeKeys: [], //Array of keycodes that should close the popup.
	freeze: true, //Disable scrolling when a popup opens.
	classes: "", //Space seperated list of classes to be added.
	stickToBottom: true //Bottom positioned popups grow from bottom to top.
});</code></pre>
	<hr>
	<h2 id="advanced">Advanced</h2>
	<h3 id="methods">Methods</h3>
	<p>An option like position:</p>
	<pre><code>var example3 = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure",
		value: true
	}, {
		text: "Nope"
	}],
	position: "top"
});</code></pre>
	<p>Can also be set using a method of the jPopup instance:</p>
	<pre><code>example3.position("bottom");</code></pre>
	<p>The value of an option can also be retrieved using the same method without parameters:</p>
	<pre><code>example3.position(); //Will output "bottom".</code></pre>
	<p>Methods are also chainable:</p>
	<pre><code>example3.position("left").overlay(false).offset({x: 400});</code></pre>
	<p>The method names and accepted parameter values are the same the as options available when creating a new jPopup instance.</p>
	<p>The following methods are also available:</p>
	<pre><code>addClass(); //Add a class to the popup wrapper and overlay.
removeClass(); //Remove a class from the popup wrapper and overlay.
form(); //Get popup form jQuery object.
clear(); //Clear input values.
clone(); //Create a copy of this jPopup instance as new jPopup instance.</code></pre>
	<h3 id="input">Input</h3>
	<p>To get user input you can add an input element to the content:</p>
	<pre><code>var example4 = new jPopup({
	title: "&lt;h2&gt;What's your name?&lt;/h2&gt;",
	content: "&lt;input type=\"text\" placeholder=\"Name\" /&gt;",
	buttons: [{
		text: "Submit name",
		value: true
	}, {
		text: "Cancel"
	}]
});</code></pre>
	<p>Open the jPopup instance on button click and get the name:</p>
	<pre><code>$("button").click(function() {
	example4.open(function(value) {
		if(value) {
			//Get the name of the user.
			var name = this.form().find("input").val();
			
			//Reply with the name of the user.
			new jPopup({
				content: "&lt;p&gt;Hello " + name + "!&lt;/p&gt;",
				buttons: [{
					text: "Ok"
				}]
			}).open();
		}

		//Clear input values.
		this.clear();
	});
});</code></pre>
	<p>Try it yourself:<button class="button" id="example4">Open popup</button></p>
	<h3 id="global_options">Global options</h3>
	<p>The default options for new jPopup instances can be changed by defining global options:</p>
	<pre><code>jPopup.options = {
	//Define global options.
};</code></pre>
	<h3 id="buttons">Buttons</h3>
	<p>The buttons option in a jPopup instance consists of an array of button objects.</p>
	<p>A button object has the following options:</p>
	<pre><code>var button = {
	text: "Sure", //Text to show on button.
	name: "", //Name of the button.
	value: null, //Value passed to callback function.
	classes: "", //Space seperated list of classes.
	disabled: false, //Disabled state.
	hidden: false, //Hide button.
	close: true //Popup closes when button is clicked.
	onclick: null //Function called on click.
};</code></pre>
	<p>The buttons method can return and replace the buttons in a jPopup instance:</p>
	<pre><code>buttons(); //Get an array of the button objects.
buttons(2); //Get third button object in array of buttons (array starts with 0).
buttons("confirm"); //Get the button object with the name "confirm".
buttons(arrayOfButtons); //Replaces the buttons in the jPopup instance.</code></pre>
	<p>Buttons can also be added to the jPopup instance:</p>
	<pre><code>buttons.add(button);</code></pre>
	<p>Buttons returned using the buttons method are dynamic and have methods:</p>
	<pre><code>name(); //Get or set button name.
text(); //Get or set button text.
value(): //Get or set button value.
classes(); //Get or replace button classes.
addClass(); //Add a class to the button.
removeClass(); //Remove a class from the button.
remove(); //Remove the button from all jPopup instances.
disable(); //Disable the button.
enable(); //Enable the button.
close(); //Get or set if the popup should be clsoed on click.
hide(); //Hide the button
show(); //Show the button.
move(x); //Move button x positions relative to current position.
move(x, true); //Move button to position x.
clone(); //Create a copy of the button.
onclick(); //Get or set function on click.
</code></pre>
	<p>To create a dynamic button object to be later added to jPopup instances you can also create a new jPopup.button instance:</p>
	<pre><code>var button = new jPopup.button({
	text: "Sure", //Text to show on button.
	name: "", //Name of the button.
	value: null, //Value passed to callback function.
	classes: "", //Space seperated list of classes.
	disabled: false, //Disabled state.
	hidden: false, //Hide button.
	close: true //Popup closes when button is clicked.
	onclick: null //Function called on click.
});</code></pre>
	<h3 id="elements">Elements</h3>
	<p>Each jPopup instance has the following html structure:</p>
	<pre><code>&lt;div class="jp_overlay"&gt;&lt;/div&gt;
&lt;div class="jp_wrapper"&gt;
	&lt;form class="jp_popup"&gt;
		&lt;header class="jp_title"&gt;
			&lt;!-- Title --&gt;
		&lt;/header&gt;
		&lt;section class="jp_content"&gt;
			&lt;!-- Content --&gt;
		&lt;/section&gt;
		&lt;footer class="jp_buttons"&gt;
			&lt;!-- Buttons --&gt;
		&lt;/footer&gt;
	&lt;/form&gt;
&lt;/div&gt;</code></pre>
	<p>The jQuery object references for each html element:</p>
	<pre><code class="javascript">example5.elements.overlay //&lt;div class="jp_overlay"&gt;&lt;/div&gt;
example5.elements.wrapper //&lt;div class="jp_wrapper"&gt;&lt;/div&gt;
example5.elements.popup //&lt;form class="jp_popup"&gt;&lt;/form&gt;
example5.elements.title //&lt;header class="jp_title"&gt;&lt;/header&gt;
example5.elements.content //&lt;section class="jp_content"&gt;&lt;/section&gt;
example5.elements.buttons //&lt;footer class="jp_buttons"&gt;&lt;/footer&gt;</code></pre>
	<p>The jQuery object references are useful for animations, overrides and plugins.</p>
	<h3 id="animations">Animations</h3>
	<p>Custom animation functions can be defined in the animations option.</p>
	<p>A custom animation function can be seperately defined for opening, closing and each position.</p>
	<p>Make sure that the speed option is equal to the speed of the closing animations.</p>
	<p>In this example <a href="https://daneden.github.io/animate.css/" target="_blank" class="link">animate.css</a> is used for the custom animations:</p>
	<pre><code>var example6 = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	speed: 2000,
	animations: {
		open: {
			center: function() {
				this.elements.popup.animateCss("lightSpeedIn");
			}
		},
		close: {
			center: function() {
				this.elements.popup.animateCss("hinge");
			}
		}
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="example6">Open popup</button></p>
	<h3 id="overrides">Overrides</h3>
	<p>To extend or replace functionality you can use overrides.</p>
	<p>The example below uses an override to show an alert before the original open function is executed.</p>
	<pre><code>var example7 = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	overrides: {
		open: function() {
			//Show an alert.
			alert("Opening popup");
			
			//Execute original method.
			jPopup._super(this);
		}
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="example7">Open popup</button></p>
	<p>To execute code after the original function:</p>
	<pre><code>var example8 = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	overrides: {
		open: function() {
			//Execute original method.
			var s = jPopup._super(this);
			
			//Show an alert.
			alert("Opening popup");
			
			return s;
		}
	}
});</code></pre>
	<p>Overrides are used to extend functionality of the jPopup methods.</p>
	<p>The jPopup methods and their functionality can be found by looking at the <i>jquery.jpopup.js</i> file, the methods are documented with comments.</p>
	<p>Keep in mind that not calling the <i>jPopup._super(this)</i> method means that any code that would be executed after the override code would not be executed.</p>
	<p>The jPopup functions can be overriden multiple times because of multiple plugins and overrides on the jPopup instance itself.</p>
	<hr>
	<h2 id="plugins">Plugins</h2>
	<h3 id="internet_explorer">Internet Explorer</h3>
	<p>By default there's support for IE10+.</p>
	<p>To add support for IE6+ include <i>jquery.jpopup.ie.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.ie.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>The plugin will automatically add a class to the popup with the IE version which can be used to style the popup.</p>
	<h3 id="draggable">Draggable</h3>
	<p>To make popups draggable include <i>jquery.jpopup.draggable.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.draggable.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>Then enable dragging on a popup:</p>
	<pre><code>var exampleDraggable = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	plugins: {
		draggable: true
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="exampleDraggable">Open popup</button></p>
	<h3 id="resizeable">Resizable</h3>
	<p>To make popups resizeable include <i>jquery.jpopup.resizeable.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.resizeable.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>Then enable resizing on a popup:</p>
	<pre><code>var exampleResizeable = new jPopup({
	title: "&lt;h2&gt;Hello World!&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	plugins: {
		resizeable: true
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="exampleResizeable">Open popup</button></p>
	<h3 id="responsive">Responsive</h3>
	<p>To add responsive functionality to your popups include <i>jquery.jpopup.responsive.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.resizeable.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>Then set responsive breakpoint functions on a popup:</p>
	<pre><code>var exampleResponsive = new jPopup({
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Sure"
	}, {
		text: "Nope"
	}],
	plugins: {
		responsive: {
			0: function() { //799px and below
				this.title("&lt;h3&gt;Hello!&lt;/h3&gt;");
			},
			800: function() { //Between 800 and 1399px
				this.title("&lt;h2&gt;Hello World!&lt;/h2&gt;");
			},
			1400: function() { //1400px and above
				this.title("&lt;h1&gt;Hello Galaxy!&lt;/h1&gt;");
			}
		}
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="exampleResponsive">Open popup</button></p>
	<h3 id="queue">Queue</h3>
	<p>To add queue functionality to your popups include <i>jquery.jpopup.queue.min.js</i> in your page:</p>
	<pre><code>&lt;script src="jquery.jpopup.queue.min.js" type="text/javascript"&gt;&lt;/script&gt;</code></pre>
	<p>Then set responsive breakpoint functions on a popup:</p>
	<pre><code>var exampleQueue = new jPopup({
	title: "&lt;h2&gt;Step 1&lt;/h2&gt;",
	content: "&lt;p&gt;Sudo make me a sandwich?&lt;/p&gt;",
	buttons: [{
		text: "Cancel"
	}],
	plugins: {
		queue: {
			button: {
				text: "Next"
			},
			steps: [
				function() { //Step 2
					this.title("&lt;h2&gt;Step 2&lt;/h3&gt;");
				},
				function() { //Step 3
					this.title("&lt;h2&gt;Step 3&lt;/h2&gt;");
				},
				function() { //Step 4 (final)
					this.title("&lt;h2&gt;Step 4&lt;/h2&gt;");
					this.buttons([{text: "Finish"}]);
				}
			]
		}
	}
});</code></pre>
	<p>Try it yourself:<button class="button" id="exampleQueue">Open popup</button></p>
</section>
<aside id="menu">
	<ul>
		<li><a href="#logo" class="">Download</a></li>
		<li><a href="#features">Features</a></li>
		<li>
			<a href="#getting_started" class="">Getting started</a>
			<ul>
				<li><a href="#installation">Installation</a></li>
				<li><a href="#callback_function" class="">Callback function</a></li>
			</ul>
		</li>
		<li><a href="#options" class="">Options</a></li>
		<li>
			<a href="#advanced" class="current">Advanced</a>
			<ul>
				<li><a href="#methods" class="">Methods</a></li>
				<li><a href="#input" class="">Input</a></li>
				<li><a href="#global_options" class="">Global options</a></li>
				<li><a href="#buttons" class="">Buttons</a></li>
				<li><a href="#elements" class="">Elements</a></li>
				<li><a href="#animations" class="current">Animations</a></li>
				<li><a href="#overrides" class="">Overrides</a></li>
			</ul>
		</li>
		<li>
			<a href="#plugins" class="">Plugins</a>
			<ul>
				<li><a href="#internet_explorer" class="">Internet Explorer</a></li>
				<li><a href="#draggable" class="">Draggable</a></li>
				<li><a href="#resizeable" class="">Resizable</a></li>
				<li><a href="#responsive" class="">Responsive</a></li>
				<li><a href="#queue" class="">Queue</a></li>
			</ul>
		</li>
		<li><a id="contact">Contact</a></li>
	</ul>
</aside>
<script src="./js/jquery-1.12.0.min.js" type="text/javascript"></script>
<script src="./js/jquery.jpopup.js" type="text/javascript"></script>
<script src="./js/jquery.jpopup.ie.min.js" type="text/javascript"></script>
<script src="./js/jquery.jpopup.draggable.min.js" type="text/javascript"></script>
<script src="./js/jquery.jpopup.responsive.min.js" type="text/javascript"></script>
<script src="./js/jquery.jpopup.queue.min.js" type="text/javascript"></script>
<!--[if gt IE 8]>
<script src="./js/highlight.min.js" type="text/javascript"></script>
<script>hljs.initHighlightingOnLoad();</script>
<![endif]-->
<!--[if lt IE 9]>
<script src="./js/html5shiv.min.js" type="text/javascript"></script>
<![endif]-->
<script type="text/javascript">
$(function() {
	$.get("https://api.github.com/repos/seahorsepip/jPopup/releases/latest", function(data) {
		$("#download").append(data.tag_name);
		$("#download").attr("href", data.zipball_url);
	});
	
	function scroll() {
		var top = $("html").scrollTop() ? $("html").scrollTop() : $("body").scrollTop();
		var id;
		$("#wrapper h1, #wrapper h2, #wrapper h3").each(function() {
			if($(this).offset().top - top - 200 > 0) {
				return false;
			} else {
				id = $(this).attr("id");
			}
		});
		$("#menu a").removeClass("current");
		if(id) {
			var target = $("#menu a[href=\"#" + id + "\"]");
			target.addClass("current");
			target.parent("li").parent("ul").parent("li").children("a").addClass("current");
		}
	}
	scroll();
	$(document).on("scroll", function() {
		scroll();
	});
	
	$("#menu a:not(#contact)").click(function(e) {
		e.preventDefault();
		var id = $(this).attr("href");
		$("html, body").animate({
			scrollTop: $(id).offset().top - 48
		}, 500);
	});
	
	//Damn spambots
	var Base64 = {_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}
	var email = "Vm0wd2VHUXhTWGxUV0d4V1YwZG9WbFl3Wkc5WFZsbDNXa1JTVjFKdGVGWlZNakExVmpGS2RHVkdXbFpOYWtFeFZtMTRZV015U2tWVWJHaG9UVlZ3VlZkV1pEUlpWMDE0Vkc1T2FWSXdXbGhXYWtaTFUxWmFjbHBJY0d4U2JWSkpWbTEwYTJGR1NuVlJiR2hYWWxob00xWldXbUZqTVhCRlZXeG9hVlpyV1RGV1ZFb3dWakZrU0ZOcmFGWmlhMHBZVkZWYVlWUkdWbk5YYlhSWFRWZFNNRlZ0ZUZOVWJFcEhWMWhrVjFaRmIzZFdha1poVTBaT2NtSkdTbWxTTTJoWVYxWmtlazFXVmtkVmJrcFlZbGhTV0ZSV1pEQk9iR3hXVjJ4T2FGWnNjSHBaTUZwdlZqRktjMk5HYUZkaGExcFVXWHBHVDJOc1duTlRiR1JUVFRBd01RPT0="
	$("#contact").click(function() {
		//Decode email
		var email_str = email;
		for(var x = 0; x < 10; x++) {
			email_str = Base64.decode(email_str);
		}
		
		//Open email
		var open = window.open("mailto:" + email_str);
	});	
	
	var example1 = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}]
	});
	$("#example1").click(function() {
		example1.open();
	});
	
	var example2 = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure",
			value: true
		}, {
			text: "Nope"
		}]
	});
	$("#example2").click(function() {
		example2.open(function(value) {
			if(value) {
				new jPopup({
					content: "<p>Thanks!</p>",
					buttons: [{
						text: "Ok"
					}]
				}).open();
			}
		});
	});
	
	var example4 = new jPopup({
		title: "<h2>What's your name?</h2>",
		content: "<input type=\"text\" placeholder=\"Name\" />",
		buttons: [{
			text: "Submit name",
			value: true
		}, {
			text: "Cancel"
		}]
	});
	$("#example4").click(function() {
		example4.open(function(value) {
			if(value) {
				var name = this.form().find("input").val();
				new jPopup({
					content: "<p>Hello " + name + "!</p>",
					buttons: [{
						text: "Ok"
					}]
				}).open();
			}
			this.clear();
		});
	});
	
	var example6 = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}],
		speed: 2000,
		animations: {
			open: {
				center: function() {
					this.elements.popup.animateCss("lightSpeedIn");
				}
			},
			close: {
				center: function() {
					this.elements.popup.animateCss("hinge");
				}
			}
		}
	});
	$("#example6").click(function() {
		example6.open();
	});
	
	var example7 = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}],
		overrides: {
			open: function() {
				alert("Opening popup");
				jPopup._super(this);
			}
		}
	});
	$("#example7").click(function() {
		example7.open();
	});
	
	
	var exampleDraggable = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}],
		plugins: {
			draggable: true
		}
	});
	$("#exampleDraggable").click(function() {
		exampleDraggable.open();
	});
	
	var exampleResizeable = new jPopup({
		title: "<h2>Hello World!</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}],
		plugins: {
			resizeable: true
		}
	});
	$("#exampleResizeable").click(function() {
		exampleResizeable.open();
	});
	
	var exampleResponsive = new jPopup({
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Sure"
		}, {
			text: "Nope"
		}],
		plugins: {
			responsive: {
				0: function() { //799px and below
					this.title("<h3>Hello!</h3>");
				},
				800: function() { //Between 800 and 1399px
					this.title("<h2>Hello World!</h2>");
				},
				1400: function() { //1400px and above
					this.title("<h1>Hello Galaxy!</h1>");
				}
			}
		}
	});
	$("#exampleResponsive").click(function() {
		exampleResponsive.open();
	});
	
	var exampleQueue = new jPopup({
		title: "<h2>Step 1</h2>",
		content: "<p>Sudo make me a sandwich?</p>",
		buttons: [{
			text: "Cancel"
		}],
		plugins: {
			queue: {
				button: {
					text: "Next"
				},
				steps: [
					function() { //Step 2
						this.title("<h2>Step 2</h3>");
					},
					function() { //Step 3
						this.title("<h2>Step 3</h2>");
					},
					function() { //Step 4 (final)
						this.title("<h2>Step 4</h2>");
						this.buttons([{text: "Finish"}]);
					}
				]
			}
		}
	});
	$("#exampleQueue").click(function() {
		exampleQueue.open();
	});
	
	$.fn.extend({
		animateCss: function (animationName) {
			var animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
			$(this).addClass('animated ' + animationName).one(animationEnd, function() {
				$(this).removeClass('animated ' + animationName);
			});
		}
	});
});
</script>
</body>
</html>